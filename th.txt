PROPS:
1)props allows to pass data from parent to child component
a --> b -->c
///a -->b
//a -->b --> c
   -->props drilling..

DOM  : document object model <html>

what is virtual DOM in react js?
virtual DOM is a lightweight copy of the actual DOM. 
It is a node tree that lists elements and their attributes and content as objects and properties.
React's virtual DOM is a representation of the actual DOM. It is a lightweight copy of the actual DOM.

state:

changes virtual dom  : original dom compare : changes only the changes part of the dom

hook : built in functions
useState : state


Navbar component
react-router-dom v6.x

root --> <BrowserRouter>

index.js
<Routes>
   <Route path ="/netflixhome" element = {<NetflixHome/>}>
   <Route path ="/netflixhome" element = {<NetflixHome/>}>
   <Route path ="/netflixhome" element = {<NetflixHome/>}>
</Routes>


Shows --> 50 shows 
click -->
playShow/id -->



FORM HANDLING:
-------------
react hook forms..

npm install react-hook-form

register  -->object
handleSubmit -->function
formState:{error}

--------------------------------
3 fileds
name
age
email

useState

handleSubmmit(cb){

   obj ={
      name: "sdf",
      age: 23,
      email: ""
   }

   cb(obj)

}

handleSubmit(submitHandler){



   submitHandler(obj)
}



{
   required:
   {
      value:true,message:"Name is Required*"
   }
}

{
            required:
            {
                value:true,
                message:"Age is Required*"
            }   
}


------------------------------------------------
API CALLING

api: application programming interface

REACT JS | ANGULAR JS  | ANDROID .... | database connection 

API :-[URL] -> REST APIS


GOOGLE --> * : API --->
ZOMATO | uber : -- google map : api --> map --> 

GOOGLE FORM  : --> android : form -->submit --> [API] -->GOOGLE DATABSE

5 type of API | request methods:
GET : fetch data
POST : insert data
PUT : update data
DELETE : delete data
PATCH : update data | partial update

---------------------------------------------------------------------

api consumption:
--------------------------------------------------------------------
js --> fetch()

axios:
npm install axios

api resposne : JSON


axios.data --> actual response




useEffect: lifecycle hook
to handle side effects in react js we use useEffect hook

:side Effects:
eg:
1)api calling
2)chat application
: send --> 
   replay :


props ->props drillig
context ->api
redux
---------------------------------
props: parent to child
context: global state management
redux: global state management : [*]


store :[state[data]]
action:(type,payload)
reducers: [action,state]



action -->filed
redcucer -->file